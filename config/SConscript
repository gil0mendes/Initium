#
# The MIT License (MIT)
#
# Copyright (c) 2014 Gil Mendes <gil00mendes@gmail>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#

import os

class ConfigDict(dict):
    def __init__(self, *args, **kwargs):
        dict.__init__(self, *args, **kwargs)

    # Get a configuration value. This returns None for any accesses to
    # undefined keys.
    def __getitem__(self, key):
        try:
            return dict.__getitem__(self, key)
        except KeyError:
            return None

def load_file(path, var):
    vars = {}
    execfile(path, vars, vars)
    return vars[var]

# Build a list of known configurations.
configs = {}
entries = Glob('*.def')
for entry in entries:
    config = load_file(entry.name, 'config')

    def load_includes(curr):
        if not curr.has_key('includes'):
            return
        for include in curr['includes']:
            included = load_file('%s.inc' % (include), 'include')
            a = included['config'].items() if included.has_key('config') else []
            b = config['config'].items() if config.has_key('config') else []
            config['config'] = dict(a + b)
            load_includes(included)

    load_includes(config)
    config['config'] = ConfigDict(config['config'])

    name, ext = os.path.splitext(entry.name)
    configs[name] = config

Return('configs')

# EOF
#
# The MIT License (MIT)
#
# Copyright (c) 2014 Gil Mendes (gil0mendes)
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#

vars = ['config', 'defaults', 'env']

Import(*vars)
from util import FeatureSources

sources = FeatureSources(config, [
  'lib/printf.c',
  'lib/string.c',

  'console.c'
])

# Set the include search paths.
env['CPPPATH'] = [
    Dir('include'),
    Dir('arch/%s/include' % (config['ARCH'])),
    Dir('platform/%s/include' % (config['PLATFORM'])),
]

# Include the generated configuration header.
env['CCFLAGS'] += ['-include', 'build/%s/config.h' % (env['CONFIG'])]
env['ASFLAGS'] += ['-include', 'build/%s/config.h' % (env['CONFIG'])]

# Get the list of source files from the architecture/platform.
arch_sources = SConscript(dirs = ['arch/' + config['ARCH']], exports = vars)
platform_sources = SConscript(dirs = ['platform/' + config['PLATFORM']], exports = vars)
drivers_sources = SConscript(dirs = ['drivers'], exports = vars)
sources = arch_sources + platform_sources + drivers_sources + sources
objects = map(env.Object, sources)

# Link the loader.
env.Program('loader.elf', objects, LINKFLAGS = env['LINKFLAGS'] + ['-Wl,-T,$LDSCRIPT'])
Depends('loader.elf', env['LDSCRIPT'])

# Generate various information files and the stripped loader binary.
target = env.Command(['loader', 'loader.lst', 'loader.rde', 'loader.sym'], 'loader.elf', [
    Action('$OBJCOPY -O binary --strip-all $SOURCE ${TARGETS[0]}', '$GENCOMSTR'),
    Action('$OBJDUMP -d $SOURCE > ${TARGETS[1]}', None),
    Action('$READELF -a $SOURCE > ${TARGETS[2]}', None),
    Action('$NM -C $SOURCE | sort > ${TARGETS[3]}', None),
])

defaults.append(target)

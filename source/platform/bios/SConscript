#
# Copyright (C) 2014 Gil Mendes
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of
# this software and associated documentation files (the "Software"), to deal in
# the Software without restriction, including without limitation the rights to
# use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
# the Software, and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
# FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
# COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
# IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#

Import('config', 'defaults', 'env')
from util import FeatureSources

sources = FeatureSources(config, [
  'loaders/chain.c',
  'loaders/chain_enter.S',

  'bios.S',
  'disk.c',
  'start.S',
  'video.c',
  'memory.c',
  'console.c',
  'platform.c',
  #'multiboot.c',
])

# Set the linker script path.
env['LDSCRIPT'] = env.LDScript('link.ld', 'link.ld.in')

# Build the stage 1 loaders.
env.LDScript('stage1/stage1.ld', 'stage1/stage1.ld.in')
stage1s = ['cdboot', 'pxeboot']
for f in stage1s:
    # Build an ELF image.
    linkflags = env['LINKFLAGS'] + ['-Wl,-T,${TARGET.dir}/stage1.ld', '-Wl,-N']
    target = env.Program('stage1/%s.elf' % (f), 'stage1/%s.S' % (f), LINKFLAGS = linkflags)
    Depends(target, File('stage1/stage1.ld'))

    # Create a disassembly.
    env.AddPostAction(target,
        Action('$OBJDUMP -d -m i386 -M i8086 $TARGET > ${TARGET.base}.lst', None))

    # Create the final stripped binary.
    target = env.Command('stage1/%s.bin' % (f), target,
        Action('$OBJCOPY -O binary --strip-all $SOURCE $TARGET', '$GENCOMSTR'))

    defaults.append(target)

# Build the final loader binary.
loader = env.Command(env['OUTDIR'].File('loader'), env['LOADER'],
    Action('$OBJCOPY -O binary --strip-all $SOURCE $TARGET', '$GENCOMSTR'))
defaults.append(loader)

# Create CD/PXE boot images by concatenating the boot sector with the loader.
target = env.Command(env['OUTDIR'].File('cdboot.img'), ['stage1/cdboot.bin', loader],
    Action('cat ${SOURCES[0]} ${SOURCES[1]} > $TARGET', '$GENCOMSTR'))
defaults.append(target)

# Copy the disk boot sectors to the output directory.
# TODO

Return('sources')

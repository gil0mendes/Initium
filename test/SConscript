#
# The MIT License (MIT)
#
# Copyright (c) 2015 Gil Mendes
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#

import os

Import('env', 'config')

if config['ARCH'] == 'x86':
    x86_sources = ['../source/drivers/serial/ns16550.c']
    variants = [
        {
            'name': '32',
            'ccflags': ['-m32'],
            'asflags': ['-m32'],
            'linkflags': ['-m32'],
            'ldscript': 'link-ia32.ld.in',
            'sources': x86_sources + [
                'mmu-ia32.c',
                '../source/lib/runtime/i386/udivdi3.S',
                '../source/lib/runtime/i386/umoddi3.S',
            ],
        }, {
            'name': '64',
            'ccflags': ['-m64', '-mcmodel=kernel', '-mno-red-zone'],
            'asflags': ['-m64'],
            'linkflags': ['-m64'],
            'ldscript': 'link-amd64.ld.in',
            'sources': x86_sources + [
                'mmu-amd64.c',
            ],
        },
    ]
else:
    variants = []

main_sources = [
    'console.c',
    'main.c',
    'mm.c',
    'support.c',
    '../source/lib/printf.c',
    '../source/lib/string.c',
]

for variant in variants:
    name = variant['name'] if 'name' in variant else ''
    ccflags = variant['ccflags'] if 'ccflags' in variant else []
    asflags = variant['asflags'] if 'asflags' in variant else []
    linkflags = variant['linkflags'] if 'linkflags' in variant else []
    variant_sources = variant['sources'] if 'sources' in variant else []

    ldscript = env.LDScript('link%s.ld' % (name), variant['ldscript'])

    # Override whatever machine-specific flags were used to compile the loader.
    ccflags += [x for x in env['CCFLAGS'] if not x.startswith('-m') and x != '-fpic']
    asflags += [x for x in env['ASFLAGS'] if not x.startswith('-m') and x != '-fpic']

    linkflags += ['-nostdlib', '-Wl,--build-id=none']
    linkflags += ["-Wl,-T,${File('link%s.ld')}" % name]

    sources = map(File, main_sources + variant_sources)

    # Generate a unique object name per variant for each source file.
    objects = map(
        lambda source: env.Object(
            os.path.join(name, '%s.o' % (os.path.splitext(os.path.basename(str(source)))[0])),
            source,
            CCFLAGS = ccflags, ASFLAGS = asflags, CPPDEFINES = ['__TEST']),
        sources)

    target = env.Program('test%s.elf' % (name), objects, LINKFLAGS = linkflags)
    Depends(target, ldscript)

    # Generate various information files.
    env.AddPostAction(target, [
        Action('$OBJDUMP -d $TARGET > ${TARGET.base}.lst', None),
        Action('$READELF -aW $TARGET > ${TARGET.base}.rde', None),
        Action('$NM -C $TARGET | sort > ${TARGET.base}.sym', None),
    ])

    Alias('test', File('test%s.elf' % (name)))
